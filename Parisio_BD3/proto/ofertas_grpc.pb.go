// Especifica la versi√≥n de la sintaxis de Protocol Buffers.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/ofertas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ofertas_Ofertas_FullMethodName = "/Ofertas/Ofertas"
)

// OfertasClient is the client API for Ofertas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfertasClient interface {
	Ofertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error)
}

type ofertasClient struct {
	cc grpc.ClientConnInterface
}

func NewOfertasClient(cc grpc.ClientConnInterface) OfertasClient {
	return &ofertasClient{cc}
}

func (c *ofertasClient) Ofertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertasResponse)
	err := c.cc.Invoke(ctx, Ofertas_Ofertas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfertasServer is the server API for Ofertas service.
// All implementations must embed UnimplementedOfertasServer
// for forward compatibility.
type OfertasServer interface {
	Ofertas(context.Context, *OfertasRequest) (*OfertasResponse, error)
	mustEmbedUnimplementedOfertasServer()
}

// UnimplementedOfertasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfertasServer struct{}

func (UnimplementedOfertasServer) Ofertas(context.Context, *OfertasRequest) (*OfertasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ofertas not implemented")
}
func (UnimplementedOfertasServer) mustEmbedUnimplementedOfertasServer() {}
func (UnimplementedOfertasServer) testEmbeddedByValue()                 {}

// UnsafeOfertasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfertasServer will
// result in compilation errors.
type UnsafeOfertasServer interface {
	mustEmbedUnimplementedOfertasServer()
}

func RegisterOfertasServer(s grpc.ServiceRegistrar, srv OfertasServer) {
	// If the following call pancis, it indicates UnimplementedOfertasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ofertas_ServiceDesc, srv)
}

func _Ofertas_Ofertas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfertasServer).Ofertas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ofertas_Ofertas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfertasServer).Ofertas(ctx, req.(*OfertasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ofertas_ServiceDesc is the grpc.ServiceDesc for Ofertas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ofertas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ofertas",
	HandlerType: (*OfertasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ofertas",
			Handler:    _Ofertas_Ofertas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}

const (
	DynamoDB_GuardarOfertas_FullMethodName = "/DynamoDB/GuardarOfertas"
	DynamoDB_EnviarOfertas_FullMethodName  = "/DynamoDB/EnviarOfertas"
)

// DynamoDBClient is the client API for DynamoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamoDBClient interface {
	GuardarOfertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error)
	EnviarOfertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error)
}

type dynamoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamoDBClient(cc grpc.ClientConnInterface) DynamoDBClient {
	return &dynamoDBClient{cc}
}

func (c *dynamoDBClient) GuardarOfertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertasResponse)
	err := c.cc.Invoke(ctx, DynamoDB_GuardarOfertas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamoDBClient) EnviarOfertas(ctx context.Context, in *OfertasRequest, opts ...grpc.CallOption) (*OfertasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertasResponse)
	err := c.cc.Invoke(ctx, DynamoDB_EnviarOfertas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamoDBServer is the server API for DynamoDB service.
// All implementations must embed UnimplementedDynamoDBServer
// for forward compatibility.
type DynamoDBServer interface {
	GuardarOfertas(context.Context, *OfertasRequest) (*OfertasResponse, error)
	EnviarOfertas(context.Context, *OfertasRequest) (*OfertasResponse, error)
	mustEmbedUnimplementedDynamoDBServer()
}

// UnimplementedDynamoDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamoDBServer struct{}

func (UnimplementedDynamoDBServer) GuardarOfertas(context.Context, *OfertasRequest) (*OfertasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarOfertas not implemented")
}
func (UnimplementedDynamoDBServer) EnviarOfertas(context.Context, *OfertasRequest) (*OfertasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarOfertas not implemented")
}
func (UnimplementedDynamoDBServer) mustEmbedUnimplementedDynamoDBServer() {}
func (UnimplementedDynamoDBServer) testEmbeddedByValue()                  {}

// UnsafeDynamoDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamoDBServer will
// result in compilation errors.
type UnsafeDynamoDBServer interface {
	mustEmbedUnimplementedDynamoDBServer()
}

func RegisterDynamoDBServer(s grpc.ServiceRegistrar, srv DynamoDBServer) {
	// If the following call pancis, it indicates UnimplementedDynamoDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamoDB_ServiceDesc, srv)
}

func _DynamoDB_GuardarOfertas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBServer).GuardarOfertas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDB_GuardarOfertas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBServer).GuardarOfertas(ctx, req.(*OfertasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamoDB_EnviarOfertas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBServer).EnviarOfertas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDB_EnviarOfertas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBServer).EnviarOfertas(ctx, req.(*OfertasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamoDB_ServiceDesc is the grpc.ServiceDesc for DynamoDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamoDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DynamoDB",
	HandlerType: (*DynamoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardarOfertas",
			Handler:    _DynamoDB_GuardarOfertas_Handler,
		},
		{
			MethodName: "EnviarOfertas",
			Handler:    _DynamoDB_EnviarOfertas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}
