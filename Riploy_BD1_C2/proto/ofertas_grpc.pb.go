// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/ofertas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ofertas_EnviarOferta_FullMethodName = "/Ofertas/EnviarOferta"
)

// OfertasClient is the client API for Ofertas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para productores -> broker
type OfertasClient interface {
	EnviarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*OfertaResponse, error)
}

type ofertasClient struct {
	cc grpc.ClientConnInterface
}

func NewOfertasClient(cc grpc.ClientConnInterface) OfertasClient {
	return &ofertasClient{cc}
}

func (c *ofertasClient) EnviarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*OfertaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertaResponse)
	err := c.cc.Invoke(ctx, Ofertas_EnviarOferta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfertasServer is the server API for Ofertas service.
// All implementations must embed UnimplementedOfertasServer
// for forward compatibility.
//
// Servicio para productores -> broker
type OfertasServer interface {
	EnviarOferta(context.Context, *OfertaRequest) (*OfertaResponse, error)
	mustEmbedUnimplementedOfertasServer()
}

// UnimplementedOfertasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfertasServer struct{}

func (UnimplementedOfertasServer) EnviarOferta(context.Context, *OfertaRequest) (*OfertaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarOferta not implemented")
}
func (UnimplementedOfertasServer) mustEmbedUnimplementedOfertasServer() {}
func (UnimplementedOfertasServer) testEmbeddedByValue()                 {}

// UnsafeOfertasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfertasServer will
// result in compilation errors.
type UnsafeOfertasServer interface {
	mustEmbedUnimplementedOfertasServer()
}

func RegisterOfertasServer(s grpc.ServiceRegistrar, srv OfertasServer) {
	// If the following call pancis, it indicates UnimplementedOfertasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ofertas_ServiceDesc, srv)
}

func _Ofertas_EnviarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfertasServer).EnviarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ofertas_EnviarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfertasServer).EnviarOferta(ctx, req.(*OfertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ofertas_ServiceDesc is the grpc.ServiceDesc for Ofertas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ofertas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ofertas",
	HandlerType: (*OfertasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarOferta",
			Handler:    _Ofertas_EnviarOferta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}

const (
	DynamoDB_GuardarOferta_FullMethodName = "/DynamoDB/GuardarOferta"
	DynamoDB_LeerHistorico_FullMethodName = "/DynamoDB/LeerHistorico"
	DynamoDB_Sincronizar_FullMethodName   = "/DynamoDB/Sincronizar"
)

// DynamoDBClient is the client API for DynamoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para broker -> nodos DB
type DynamoDBClient interface {
	GuardarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*AckResponse, error)
	LeerHistorico(ctx context.Context, in *LeerHistoricoRequest, opts ...grpc.CallOption) (*HistoricoResponse, error)
	Sincronizar(ctx context.Context, in *SincronizarRequest, opts ...grpc.CallOption) (*SincronizarResponse, error)
}

type dynamoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamoDBClient(cc grpc.ClientConnInterface) DynamoDBClient {
	return &dynamoDBClient{cc}
}

func (c *dynamoDBClient) GuardarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, DynamoDB_GuardarOferta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamoDBClient) LeerHistorico(ctx context.Context, in *LeerHistoricoRequest, opts ...grpc.CallOption) (*HistoricoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricoResponse)
	err := c.cc.Invoke(ctx, DynamoDB_LeerHistorico_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamoDBClient) Sincronizar(ctx context.Context, in *SincronizarRequest, opts ...grpc.CallOption) (*SincronizarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SincronizarResponse)
	err := c.cc.Invoke(ctx, DynamoDB_Sincronizar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamoDBServer is the server API for DynamoDB service.
// All implementations must embed UnimplementedDynamoDBServer
// for forward compatibility.
//
// Servicio para broker -> nodos DB
type DynamoDBServer interface {
	GuardarOferta(context.Context, *OfertaRequest) (*AckResponse, error)
	LeerHistorico(context.Context, *LeerHistoricoRequest) (*HistoricoResponse, error)
	Sincronizar(context.Context, *SincronizarRequest) (*SincronizarResponse, error)
	mustEmbedUnimplementedDynamoDBServer()
}

// UnimplementedDynamoDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamoDBServer struct{}

func (UnimplementedDynamoDBServer) GuardarOferta(context.Context, *OfertaRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarOferta not implemented")
}
func (UnimplementedDynamoDBServer) LeerHistorico(context.Context, *LeerHistoricoRequest) (*HistoricoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeerHistorico not implemented")
}
func (UnimplementedDynamoDBServer) Sincronizar(context.Context, *SincronizarRequest) (*SincronizarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sincronizar not implemented")
}
func (UnimplementedDynamoDBServer) mustEmbedUnimplementedDynamoDBServer() {}
func (UnimplementedDynamoDBServer) testEmbeddedByValue()                  {}

// UnsafeDynamoDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamoDBServer will
// result in compilation errors.
type UnsafeDynamoDBServer interface {
	mustEmbedUnimplementedDynamoDBServer()
}

func RegisterDynamoDBServer(s grpc.ServiceRegistrar, srv DynamoDBServer) {
	// If the following call pancis, it indicates UnimplementedDynamoDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamoDB_ServiceDesc, srv)
}

func _DynamoDB_GuardarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBServer).GuardarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDB_GuardarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBServer).GuardarOferta(ctx, req.(*OfertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamoDB_LeerHistorico_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeerHistoricoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBServer).LeerHistorico(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDB_LeerHistorico_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBServer).LeerHistorico(ctx, req.(*LeerHistoricoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamoDB_Sincronizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SincronizarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBServer).Sincronizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDB_Sincronizar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBServer).Sincronizar(ctx, req.(*SincronizarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamoDB_ServiceDesc is the grpc.ServiceDesc for DynamoDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamoDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DynamoDB",
	HandlerType: (*DynamoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardarOferta",
			Handler:    _DynamoDB_GuardarOferta_Handler,
		},
		{
			MethodName: "LeerHistorico",
			Handler:    _DynamoDB_LeerHistorico_Handler,
		},
		{
			MethodName: "Sincronizar",
			Handler:    _DynamoDB_Sincronizar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}

const (
	Consumidor_RegistrarConsumidor_FullMethodName = "/Consumidor/RegistrarConsumidor"
	Consumidor_SolicitarHistorico_FullMethodName  = "/Consumidor/SolicitarHistorico"
)

// ConsumidorClient is the client API for Consumidor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para consumidores
type ConsumidorClient interface {
	RegistrarConsumidor(ctx context.Context, in *RegistroConsumidorRequest, opts ...grpc.CallOption) (*RegistroConsumidorResponse, error)
	SolicitarHistorico(ctx context.Context, in *SolicitarHistoricoRequest, opts ...grpc.CallOption) (*HistoricoConsumidorResponse, error)
}

type consumidorClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumidorClient(cc grpc.ClientConnInterface) ConsumidorClient {
	return &consumidorClient{cc}
}

func (c *consumidorClient) RegistrarConsumidor(ctx context.Context, in *RegistroConsumidorRequest, opts ...grpc.CallOption) (*RegistroConsumidorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistroConsumidorResponse)
	err := c.cc.Invoke(ctx, Consumidor_RegistrarConsumidor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumidorClient) SolicitarHistorico(ctx context.Context, in *SolicitarHistoricoRequest, opts ...grpc.CallOption) (*HistoricoConsumidorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricoConsumidorResponse)
	err := c.cc.Invoke(ctx, Consumidor_SolicitarHistorico_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumidorServer is the server API for Consumidor service.
// All implementations must embed UnimplementedConsumidorServer
// for forward compatibility.
//
// Servicio para consumidores
type ConsumidorServer interface {
	RegistrarConsumidor(context.Context, *RegistroConsumidorRequest) (*RegistroConsumidorResponse, error)
	SolicitarHistorico(context.Context, *SolicitarHistoricoRequest) (*HistoricoConsumidorResponse, error)
	mustEmbedUnimplementedConsumidorServer()
}

// UnimplementedConsumidorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumidorServer struct{}

func (UnimplementedConsumidorServer) RegistrarConsumidor(context.Context, *RegistroConsumidorRequest) (*RegistroConsumidorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarConsumidor not implemented")
}
func (UnimplementedConsumidorServer) SolicitarHistorico(context.Context, *SolicitarHistoricoRequest) (*HistoricoConsumidorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarHistorico not implemented")
}
func (UnimplementedConsumidorServer) mustEmbedUnimplementedConsumidorServer() {}
func (UnimplementedConsumidorServer) testEmbeddedByValue()                    {}

// UnsafeConsumidorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumidorServer will
// result in compilation errors.
type UnsafeConsumidorServer interface {
	mustEmbedUnimplementedConsumidorServer()
}

func RegisterConsumidorServer(s grpc.ServiceRegistrar, srv ConsumidorServer) {
	// If the following call pancis, it indicates UnimplementedConsumidorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Consumidor_ServiceDesc, srv)
}

func _Consumidor_RegistrarConsumidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroConsumidorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumidorServer).RegistrarConsumidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumidor_RegistrarConsumidor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumidorServer).RegistrarConsumidor(ctx, req.(*RegistroConsumidorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumidor_SolicitarHistorico_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitarHistoricoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumidorServer).SolicitarHistorico(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumidor_SolicitarHistorico_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumidorServer).SolicitarHistorico(ctx, req.(*SolicitarHistoricoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumidor_ServiceDesc is the grpc.ServiceDesc for Consumidor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumidor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Consumidor",
	HandlerType: (*ConsumidorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarConsumidor",
			Handler:    _Consumidor_RegistrarConsumidor_Handler,
		},
		{
			MethodName: "SolicitarHistorico",
			Handler:    _Consumidor_SolicitarHistorico_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}

const (
	NotificacionesConsumidor_RecibirOferta_FullMethodName = "/NotificacionesConsumidor/RecibirOferta"
)

// NotificacionesConsumidorClient is the client API for NotificacionesConsumidor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para notificaciones push a consumidores
type NotificacionesConsumidorClient interface {
	RecibirOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type notificacionesConsumidorClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificacionesConsumidorClient(cc grpc.ClientConnInterface) NotificacionesConsumidorClient {
	return &notificacionesConsumidorClient{cc}
}

func (c *notificacionesConsumidorClient) RecibirOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, NotificacionesConsumidor_RecibirOferta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificacionesConsumidorServer is the server API for NotificacionesConsumidor service.
// All implementations must embed UnimplementedNotificacionesConsumidorServer
// for forward compatibility.
//
// Servicio para notificaciones push a consumidores
type NotificacionesConsumidorServer interface {
	RecibirOferta(context.Context, *OfertaRequest) (*AckResponse, error)
	mustEmbedUnimplementedNotificacionesConsumidorServer()
}

// UnimplementedNotificacionesConsumidorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificacionesConsumidorServer struct{}

func (UnimplementedNotificacionesConsumidorServer) RecibirOferta(context.Context, *OfertaRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirOferta not implemented")
}
func (UnimplementedNotificacionesConsumidorServer) mustEmbedUnimplementedNotificacionesConsumidorServer() {
}
func (UnimplementedNotificacionesConsumidorServer) testEmbeddedByValue() {}

// UnsafeNotificacionesConsumidorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificacionesConsumidorServer will
// result in compilation errors.
type UnsafeNotificacionesConsumidorServer interface {
	mustEmbedUnimplementedNotificacionesConsumidorServer()
}

func RegisterNotificacionesConsumidorServer(s grpc.ServiceRegistrar, srv NotificacionesConsumidorServer) {
	// If the following call pancis, it indicates UnimplementedNotificacionesConsumidorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificacionesConsumidor_ServiceDesc, srv)
}

func _NotificacionesConsumidor_RecibirOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionesConsumidorServer).RecibirOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionesConsumidor_RecibirOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionesConsumidorServer).RecibirOferta(ctx, req.(*OfertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificacionesConsumidor_ServiceDesc is the grpc.ServiceDesc for NotificacionesConsumidor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificacionesConsumidor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificacionesConsumidor",
	HandlerType: (*NotificacionesConsumidorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecibirOferta",
			Handler:    _NotificacionesConsumidor_RecibirOferta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ofertas.proto",
}
